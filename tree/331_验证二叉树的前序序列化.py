# 序列化二叉树的一种方法是使用前序遍历。当我们遇到一个非空节点时，我们可以记录下这个节点的值。如果它是一个空节点，我们可以使用一个标记值记录，例如 #。
#
#       _9_
#     /   \
#    3     2
#   / \   / \
#  4   1  #  6
# / \ / \   / \
# # # # #   # #
#
#
#  例如，上面的二叉树可以被序列化为字符串 "9,3,4,#,#,1,#,#,2,#,6,#,#"，其中 # 代表一个空节点。
#
#  给定一串以逗号分隔的序列，验证它是否是正确的二叉树的前序序列化。编写一个在不重构树的条件下的可行算法。
#
#  每个以逗号分隔的字符或为一个整数或为一个表示 null 指针的 '#' 。
#
#  你可以认为输入格式总是有效的，例如它永远不会包含两个连续的逗号，比如 "1,,3" 。
#
#  示例 1:
#
#  输入: "9,3,4,#,#,1,#,#,2,#,6,#,#"
# 输出: true
#
#  示例 2:
#
#  输入: "1,#"
# 输出: false
#
#
#  示例 3:
#
#  输入: "9,#,#,1"
# 输出: false
#  Related Topics 栈 树 字符串 二叉树
#  👍 350 👎 0


# leetcode submit region begin(Prohibit modification and deletion)
class Solution:
    def isValidSerialization(self, preorder: str) -> bool:
        """
        栈的思路是「自底向上」的想法。下面要结合本题是「前序遍历」这个重要特点。

        我们知道「前序遍历」是按照「根节点-左子树-右子树」的顺序遍历的，只有当根节点的所有左子树遍历完成之后，才会遍历右子树。对于本题的输入，
        我们可以先判断「左子树」是否有效的，然后再判断「右子树」是否有效的，最后判断「根节点-左子树-右子树」是否为有效的。
        这个思路类似于递归，而把递归改写成循环时，就会使用「栈」，这就是本题使用「栈」的原因。

        如何判断一棵子树是否有效？首先考虑最简单情况：怎么判断一个节点是叶子节点？很明显，当一个节点的两个孩子都是 "#"（空）的时候，该节点就是叶子节点。

        当一个节点不是叶子节点的时候，那么它必定至少有一个孩子非空！有两种情况：

        两个孩子都非"#"（空）；
        一个孩子为"#"（空），另一个孩子非"#"（空）

        为了兼容这两个情况，我们想出了本题的一个重磅级的技巧：把有效的叶子节点使用 "#" 代替。 比如把 4## 替换成 # 。此时，叶子节点会变成空节点！
        """
        stack = []
        for node in preorder.split(','):
            stack.append(node)
            while len(stack) >= 3 and stack[-1] == stack[-2] == '#' and stack[-3] != '#':
                [stack.pop() for _ in range(3)]
                stack.append('#')
        return len(stack) == 1 and stack == ['#']

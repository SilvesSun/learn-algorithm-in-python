# 给你一个以字符串表示的非负整数 num 和一个整数 k ，移除这个数中的 k 位数字，使得剩下的数字最小。请你以字符串形式返回这个最小的数字。
#
#
#  示例 1 ：
#
#
# 输入：num = "1432219", k = 3
# 输出："1219"
# 解释：移除掉三个数字 4, 3, 和 2 形成一个新的最小的数字 1219 。
#
#
#  示例 2 ：
#
#
# 输入：num = "10200", k = 1
# 输出："200"
# 解释：移掉首位的 1 剩下的数字为 200. 注意输出不能有任何前导零。
#
#
#  示例 3 ：
#
#
# 输入：num = "10", k = 2
# 输出："0"
# 解释：从原数字移除所有的数字，剩余为空就是 0 。
#
#
#
#
#  提示：
#
#
#  1 <= k <= num.length <= 105
#  num 仅由若干位数字（0 - 9）组成
#  除了 0 本身之外，num 不含任何前导零
#
#  Related Topics 栈 贪心 字符串 单调栈
#  👍 635 👎 0


class Solution:
    def removeKdigits(self, num: str, k: int) -> str:
        """对于两个相同长度的数字序列，最左边不同的数字决定了这两个数字的大小，例如，对于 A = 1axxxA=1axxx，B = 1bxxxB=1bxxx，如果 a > ba>b 则 A > BA>B。

        基于此，我们可以知道，若要使得剩下的数字最小，需要保证靠前的数字尽可能小。
        给定一个长度为 nn 的数字序列,从左往右找到第一个位置i(i>0)使得num[i] < num[i-1], 删除 i-1, 如果不存在, 说明是升序, 从后删除
        可以每次对整个数字序列执行一次这个策略；删去一个字符后，剩下的 n-1n−1 长度的数字序列就形成了新的子问题，可以继续使用同样的策略，直至删除 kk 次
        """
        stack = []
        for c in num:
            while k and stack and stack[-1] > c:
                stack.pop()
                k -= 1
        if k:
            # 从后继续删除
            stack = stack[:-k]
        return ''.join(stack).lstrip('0') or '0'
